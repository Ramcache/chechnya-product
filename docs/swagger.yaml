basePath: /api
definitions:
  handlers.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  handlers.CreateByPhoneRequest:
    properties:
      phone:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handlers.OrderReviewRequest:
    properties:
      comment:
        type: string
      rating:
        type: integer
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  handlers.TruncateRequest:
    properties:
      table:
        type: string
    type: object
  handlers.UserProfileResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      isVerified:
        type: boolean
      owner_id:
        type: string
      phone:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  handlers.pushRequest:
    type: object
  models.Announcement:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.CartBulkResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemResponse'
        type: array
      total:
        type: number
    type: object
  models.CartItemResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      total:
        type: number
    type: object
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
      sort_order:
        type: integer
    type: object
  models.DailySales:
    properties:
      date:
        type: string
      orders:
        type: integer
      revenue:
        type: number
    type: object
  models.DashboardData:
    properties:
      sales_by_day:
        items:
          $ref: '#/definitions/models.DailySales'
        type: array
      top_products:
        items:
          $ref: '#/definitions/models.TopProduct'
        type: array
      total_orders:
        type: integer
      total_revenue:
        type: number
    type: object
  models.Order:
    properties:
      address:
        type: string
      change_for:
        type: number
      comment:
        type: string
      created_at:
        type: string
      date_orders:
        type: integer
      delivery_fee:
        type: number
      delivery_text:
        type: string
      delivery_type:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      order_comment:
        type: string
      owner_id:
        type: string
      payment_type:
        type: string
      rating:
        type: integer
      status:
        type: string
      total:
        type: number
    type: object
  models.OrderItem:
    properties:
      name:
        type: string
      order_id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.OrderReview:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      rating:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  models.OrderStatusRequest:
    properties:
      status:
        example: в пути
        type: string
    type: object
  models.PlaceOrderRequest:
    properties:
      address:
        type: string
      change_for:
        type: number
      comment:
        type: string
      created_at:
        type: integer
      delivery_fee:
        type: number
      delivery_text:
        type: string
      delivery_type:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      order_comment:
        type: string
      payment_type:
        type: string
      rating:
        type: integer
      status:
        type: string
    type: object
  models.Product:
    type: object
  models.ProductPatchInput:
    properties:
      availability:
        type: boolean
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      url:
        type: string
    type: object
  models.ProductResponse:
    properties:
      availability:
        type: boolean
      category_id:
        type: integer
      category_name:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      rating:
        type: number
      url:
        type: string
    type: object
  models.PushSubscriptionRequest:
    type: object
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      owner_id:
        type: string
      product_id:
        type: integer
      rating:
        type: integer
    type: object
  models.ReviewRequest:
    properties:
      comment:
        example: Отличный товар!
        type: string
      rating:
        example: 5
        type: integer
    type: object
  models.TopProduct:
    properties:
      name:
        type: string
      product_id:
        type: integer
      sold:
        type: integer
    type: object
  models.UploadedFile:
    properties:
      name:
        type: string
      size:
        type: integer
      time:
        type: string
      url:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      owner_id:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      username:
        type: string
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleAdmin
  utils.CategoryRequest:
    properties:
      name:
        type: string
      sortOrder:
        type: integer
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  utils.UpdateItemRequest:
    properties:
      quantity:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Backend for products shop
  title: Chechnya Product API
  version: "5.0"
paths:
  /api/admin//upload/{filename}:
    delete:
      parameters:
      - description: Имя файла
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить изображение
      tags:
      - Загрузка
  /api/admin/announcements:
    post:
      consumes:
      - application/json
      parameters:
      - description: title, content
        in: body
        name: input
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Announcement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать объявление
      tags:
      - Объявления
  /api/admin/announcements/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить объявление
      tags:
      - Объявления
    put:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: title, content
        in: body
        name: input
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      responses:
        "200":
          description: Updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить объявление
      tags:
      - Объявления
  /api/admin/categories:
    post:
      consumes:
      - application/json
      description: Добавляет новую категорию (только для администратора)
      parameters:
      - description: Название категории
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать новую категорию
      tags:
      - Категории
  /api/admin/categories/{id}:
    delete:
      description: Удаляет категорию по ID (только для администратора)
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Category deleted
          schema:
            type: string
        "400":
          description: Удаление не удалось
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить категорию
      tags:
      - Категории
    put:
      consumes:
      - application/json
      description: Изменяет название категории (только для администратора)
      parameters:
      - description: Идентификатор категории
        in: path
        name: id
        required: true
        type: integer
      - description: Новое имя категории
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить категорию
      tags:
      - Категории
  /api/admin/categories/bulk:
    post:
      consumes:
      - application/json
      description: Добавляет несколько категорий сразу (только для администратора)
      parameters:
      - description: Список категорий
        in: body
        name: input
        required: true
        schema:
          items:
            $ref: '#/definitions/utils.CategoryRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Categories created
          schema:
            type: string
        "400":
          description: Invalid body
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Массовое создание категорий
      tags:
      - Категории
  /api/admin/dashboard:
    get:
      description: 'Возвращает метрики: заказы, выручка, топ товары, продажи по дням'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DashboardData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Дэшборд администратора
      tags:
      - Дэшборд
  /api/admin/logs:
    get:
      description: 'Возвращает лог за указанную дату. Поддерживает скачивание. Тип:
        info или error.'
      parameters:
      - description: 'Тип логов: info (по умолчанию) или error'
        in: query
        name: type
        type: string
      - description: Дата в формате YYYY-MM-DD (по умолчанию — сегодня)
        in: query
        name: date
        type: string
      - description: Скачать файл (true) или отобразить в браузере
        in: query
        name: download
        type: boolean
      produces:
      - text/plain
      responses:
        "200":
          description: Содержимое лог-файла
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить лог-файл
      tags:
      - Логи
  /api/admin/orders:
    get:
      description: Возвращает список всех заказов (только для админа)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить все заказы (админ)
      tags:
      - Заказ
  /api/admin/orders/{id}:
    delete:
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление заказа по ID (только для админов)
      tags:
      - Заказ
  /api/admin/orders/{id}/status:
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      - description: Новый статус
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/models.OrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить статус заказа
      tags:
      - Заказ
  /api/admin/orders/export:
    get:
      description: Экспортирует все заказы в формате CSV (только для админа)
      produces:
      - text/csv
      responses:
        "200":
          description: CSV файл
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Экспорт заказов в CSV (админ)
      tags:
      - Заказ
  /api/admin/products:
    post:
      consumes:
      - application/json
      description: Создаёт новый товар (только для администратора)
      parameters:
      - description: Данные товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавить товар (админ)
      tags:
      - Товар
  /api/admin/products/{id}:
    delete:
      description: Удаляет товар по его ID (только для администратора)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить товар (админ)
      tags:
      - Товар
    patch:
      consumes:
      - application/json
      description: Обновляет отдельные поля товара по его ID (только для администратора)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Поля для обновления товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ProductPatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Частичное обновление товара (админ)
      tags:
      - Товар
    put:
      consumes:
      - application/json
      description: Обновляет существующий товар по его ID (только для администратора)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить товар (админ)
      tags:
      - Товар
  /api/admin/products/bulk:
    post:
      consumes:
      - application/json
      description: Добавляет несколько товаров сразу (только для администратора)
      parameters:
      - description: Массив товаров
        in: body
        name: input
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Product'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Массовое добавление товаров (админ)
      tags:
      - Товар
  /api/admin/truncate:
    post:
      consumes:
      - application/json
      parameters:
      - description: Название таблицы для очистки
        in: body
        name: table
        required: true
        schema:
          $ref: '#/definitions/handlers.TruncateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Очистка таблицы с перезапуском ID
      tags:
      - Admin
  /api/admin/truncate/all:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Очистить все таблицы (только админ)
      tags:
      - Admin
  /api/admin/upload:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UploadedFile'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить список изображений
      tags:
      - Загрузка
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Файл изображения
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Загрузить изображение
      tags:
      - Загрузка
  /api/admin/users:
    post:
      consumes:
      - application/json
      parameters:
      - description: Номер телефона
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateByPhoneRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Создать пользователя по номеру телефона
      tags:
      - Админ
  /api/admin/users/{id}:
    get:
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Некорректный ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить пользователя по ID
      tags:
      - Пользователи
  /api/admin/users/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить всех пользователей
      tags:
      - Профиль
  /api/announcements:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Announcement'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить все объявления
      tags:
      - Объявления
  /api/announcements/{id}:
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Announcement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить объявление по ID
      tags:
      - Объявления
  /api/cart:
    get:
      description: Возвращает список товаров в корзине для owner_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CartBulkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить содержимое корзины
      tags:
      - Корзина
    post:
      consumes:
      - application/json
      description: Добавляет товар в корзину по owner_id (user или ip)
      parameters:
      - description: ID товара и количество
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.AddToCartRequest'
      produces:
      - text/plain
      responses:
        "201":
          description: Added to cart
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Добавить товар в корзину
      tags:
      - Корзина
  /api/cart/{product_id}:
    delete:
      description: Удаляет товар по ID из корзины owner_id
      parameters:
      - description: Идентификатор товара, который нужно удалить или обновить
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Item deleted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить товар из корзины
      tags:
      - Корзина
    put:
      consumes:
      - application/json
      description: Обновляет количество указанного товара для owner_id
      parameters:
      - description: ID товара
        in: path
        name: product_id
        required: true
        type: integer
      - description: Новое количество
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateItemRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Quantity updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Обновить количество товара в корзине
      tags:
      - Корзина
  /api/cart/bulk:
    post:
      consumes:
      - application/json
      description: Добавляет несколько товаров в корзину за один запрос (bulk).
      parameters:
      - description: Список товаров для добавления
        in: body
        name: input
        required: true
        schema:
          items:
            $ref: '#/definitions/handlers.AddToCartRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Товары добавлены, возвращены список и сумма
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.CartBulkResponse'
              type: object
        "400":
          description: Некорректные данные запроса
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Ошибка сервера при получении корзины
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Добавить несколько товаров в корзину
      tags:
      - Корзина
  /api/cart/clear:
    delete:
      description: Удаляет все товары из корзины owner_id
      produces:
      - text/plain
      responses:
        "200":
          description: Cart cleared
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Очистить корзину
      tags:
      - Корзина
  /api/categories:
    get:
      description: Возвращает все доступные категории товаров
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить список категорий
      tags:
      - Категории
  /api/login:
    post:
      consumes:
      - application/json
      description: Вход по телефону/почте и паролю. Возвращает JWT токен при успехе.
      parameters:
      - description: Телефон/почта и пароль
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Вход пользователя
      tags:
      - Профиль
  /api/me:
    get:
      description: Возвращает данные профиля для авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "401":
          description: Не авторизован
          schema:
            type: string
        "404":
          description: Пользователь не найден
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить профиль пользователя
      tags:
      - Профиль
  /api/me/address:
    delete:
      description: Очищает поле адреса у текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Адрес удалён
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Ошибка удаления адреса
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить адрес пользователя
      tags:
      - Профиль
    get:
      description: Возвращает адрес текущего авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Адрес пользователя
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Ошибка получения адреса
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить адрес пользователя
      tags:
      - Профиль
    put:
      consumes:
      - application/json
      description: Обновляет или добавляет адрес текущего пользователя
      parameters:
      - description: Новый адрес
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Адрес обновлён
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Некорректный JSON
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Ошибка обновления адреса
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить адрес пользователя
      tags:
      - Профиль
  /api/order:
    post:
      consumes:
      - application/json
      description: Оформляет заказ из текущей корзины по owner_id. Можно указать координаты
        (latitude и longitude), чтобы рассчитать доставку.
      parameters:
      - description: Данные заказа с координатами
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.PlaceOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Оформить заказ
      tags:
      - Заказ
  /api/order-reviews:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderReview'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить все отзывы на заказы
      tags:
      - Отзывы заказов
  /api/orders:
    get:
      description: Возвращает список заказов для текущего owner_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить заказы пользователя
      tags:
      - Заказ
  /api/orders/{id}:
    get:
      description: Возвращает заказ с товарами по ID
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Некорректный ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Заказ не найден
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить заказ по ID
      tags:
      - Заказ
  /api/orders/{id}/repeat:
    post:
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Повторить заказ
      tags:
      - Заказ
  /api/orders/{id}/review:
    get:
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderReview'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить отзыв к заказу
      tags:
      - Отзывы заказов
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID заказа
        in: path
        name: id
        required: true
        type: integer
      - description: Комментарий и оценка (1–5)
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/handlers.OrderReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Оставить отзыв к заказу
      tags:
      - Отзывы заказов
  /api/orders/history:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: История заказов пользователя
      tags:
      - Заказ
  /api/products:
    get:
      description: Получает список товаров с возможностью фильтрации и пагинации
      parameters:
      - description: Поиск по названию или описанию
        in: query
        name: search
        type: string
      - description: ID категории
        in: query
        name: category
        type: string
      - description: Минимальная цена
        in: query
        name: min_price
        type: number
      - description: Максимальная цена
        in: query
        name: max_price
        type: number
      - description: Сортировка (price_asc, price_desc, name_asc, name_desc, available_first)
        in: query
        name: sort
        type: string
      - description: Ограничение количества результатов на странице
        in: query
        name: limit
        type: integer
      - description: Смещение для пагинации
        in: query
        name: offset
        type: integer
      - description: Фильтр по наличию
        in: query
        name: availability
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Результат с пагинацией
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить список товаров
      tags:
      - Товар
  /api/products/{id}:
    get:
      description: Возвращает детали товара по его идентификатору
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить товар по ID
      tags:
      - Товар
  /api/products/{id}/reviews:
    delete:
      description: Может удалить только тот, кто оставил (по owner_id)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить отзыв
      tags:
      - Отзывы
    get:
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить отзывы товара
      tags:
      - Отзывы
    post:
      consumes:
      - application/json
      description: Отзыв может оставить как авторизованный, так и гость. Повторный
        отзыв от одного владельца невозможен.
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Оценка и комментарий
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.ReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Добавить отзыв
      tags:
      - Отзывы
    put:
      consumes:
      - application/json
      description: Может обновить только тот, кто оставил (по owner_id)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Обновлённая оценка и комментарий
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.ReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Обновить отзыв
      tags:
      - Отзывы
  /api/push/broadcast:
    post:
      consumes:
      - application/json
      description: Рассылает сообщение всем подписанным пользователям
      parameters:
      - description: Сообщение для рассылки
        in: body
        name: input
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Массовая рассылка push-уведомлений
      tags:
      - Push
  /api/push/delete:
    delete:
      description: Удаляет подписку по endpoint
      parameters:
      - description: URL подписки
        in: query
        name: endpoint
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить подписку
      tags:
      - Push
  /api/push/send:
    post:
      consumes:
      - application/json
      description: Отправляет уведомление одному пользователю по подписке
      parameters:
      - description: Подписка и сообщение
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.pushRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Отправить push-уведомление
      tags:
      - Push
  /api/push/subscribe:
    post:
      consumes:
      - application/json
      description: Регистрирует push-подписку пользователя, сохраняет её в базе
      parameters:
      - description: Объект подписки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.PushSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Подписка на push-уведомления
      tags:
      - Push
  /api/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя по телефону, паролю, имени и e-mail
      parameters:
      - description: Данные для регистрации
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Зарегистрировать нового пользователя
      tags:
      - Профиль
  /ws/announcements:
    get:
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: WebSocket подключение для объявлений
      tags:
      - WebSocket
  /ws/orders:
    get:
      description: Устанавливает WebSocket-соединение. Админы получают уведомления
        о новых заказах.
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: Подключение к WebSocket для уведомлений о заказах
      tags:
      - WebSocket
swagger: "2.0"
