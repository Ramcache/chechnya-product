package cache

import (
	"context"
	"encoding/json"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"time"
)

type RedisCache struct {
	client *redis.Client
	ttl    time.Duration
	logger *zap.Logger
}

func NewRedisCache(client *redis.Client, ttl time.Duration, logger *zap.Logger) *RedisCache {
	return &RedisCache{
		client: client,
		ttl:    ttl,
		logger: logger,
	}
}

// GetOrSet –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –∏, –µ—Å–ª–∏ –ø—Ä–æ–º–∞—Ö ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç fetch() –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func (c *RedisCache) GetOrSet(ctx context.Context, key string, target any, fetch func() (any, error)) error {
	// –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
	val, err := c.client.Get(ctx, key).Result()
	if err == nil {
		return json.Unmarshal([]byte(val), target)
	}

	if err != redis.Nil {
		c.logger.Warn("Redis Get error", zap.Error(err))
		// –í–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –≤–µ—Å—å API
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
	data, err := fetch()
	if err != nil {
		return err
	}

	bytes, err := json.Marshal(data)
	if err != nil {
		return err
	}

	// üïí –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç)
	err = c.client.Set(ctx, key, bytes, 10*time.Minute).Err()
	if err != nil {
		c.logger.Warn("Redis Set error", zap.Error(err))
	}

	// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	encoded, _ := json.Marshal(data)
	return json.Unmarshal(encoded, target)
}

func (c *RedisCache) ClearPrefix(ctx context.Context, prefix string) error {
	iter := c.client.Scan(ctx, 0, prefix+"*", 0).Iterator()
	deleted := 0

	for iter.Next(ctx) {
		key := iter.Val()
		if err := c.client.Del(ctx, key).Err(); err == nil {
			c.logger.Info("üßπ –£–¥–∞–ª—ë–Ω –∫—ç—à –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É", zap.String("key", key))
			deleted++
		} else {
			c.logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á", zap.String("key", key), zap.Error(err))
		}
	}

	if err := iter.Err(); err != nil {
		c.logger.Error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–µ–π Redis", zap.String("prefix", prefix), zap.Error(err))
		return err
	}

	c.logger.Info("üßº –û—á–∏—Å—Ç–∫–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞", zap.String("prefix", prefix), zap.Int("—É–¥–∞–ª–µ–Ω–æ", deleted))
	return nil
}

func (c *RedisCache) Delete(ctx context.Context, key string) error {
	err := c.client.Del(ctx, key).Err()
	if err != nil {
		c.logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á", zap.String("key", key), zap.Error(err))
	} else {
		c.logger.Info("üóë –£–¥–∞–ª—ë–Ω –∫–ª—é—á", zap.String("key", key))
	}
	return err
}
