definitions:
  handlers.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  handlers.LoginRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  handlers.UserProfileResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      isVerified:
        type: boolean
      owner_id:
        type: string
      phone:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.Order:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      ownerID:
        type: string
      total:
        type: number
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  services.CartItemResponse:
    properties:
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      total:
        type: number
    type: object
  utils.CategoryRequest:
    properties:
      name:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  utils.UpdateItemRequest:
    properties:
      quantity:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/admin/categories:
    post:
      consumes:
      - application/json
      description: Добавляет новую категорию (только для администратора)
      parameters:
      - description: Название категории
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.CategoryRequest'
      produces:
      - text/plain
      responses:
        "201":
          description: Category created
          schema:
            type: string
        "400":
          description: Invalid body or duplicate name
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать новую категорию
      tags:
      - Категории
  /api/admin/categories/{id}:
    delete:
      description: Удаляет категорию по ID (только для администратора)
      parameters:
      - description: ID категории
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Category deleted
          schema:
            type: string
        "400":
          description: Удаление не удалось
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Удалить категорию
      tags:
      - Категории
    put:
      consumes:
      - application/json
      description: Изменяет название категории (только для администратора)
      parameters:
      - description: Идентификатор категории
        in: path
        name: id
        required: true
        type: integer
      - description: Новое имя категории
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить категорию
      tags:
      - Категории
  /api/admin/logs:
    get:
      description: Возвращает содержимое лог-файла (только для администратора)
      produces:
      - text/plain
      responses:
        "200":
          description: Содержимое лог-файла
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить лог-файл
      tags:
      - Логи
  /api/admin/orders:
    get:
      description: Возвращает список всех заказов (только для админа)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить все заказы (админ)
      tags:
      - Админ / Заказы
  /api/admin/orders/export:
    get:
      description: Экспортирует все заказы в формате CSV (только для админа)
      produces:
      - text/csv
      responses:
        "200":
          description: CSV файл
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Экспорт заказов в CSV (админ)
      tags:
      - Админ / Заказы
  /api/admin/products:
    post:
      consumes:
      - application/json
      description: Создаёт новый товар (только для администратора)
      parameters:
      - description: Данные товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавить товар (админ)
      tags:
      - Товар
  /api/admin/products/{id}:
    delete:
      description: Удаляет товар по его ID (только для администратора)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить товар (админ)
      tags:
      - Товар
    put:
      consumes:
      - application/json
      description: Обновляет существующий товар по его ID (только для администратора)
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - text/plain
      responses:
        "200":
          description: Product updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить товар (админ)
      tags:
      - Товар
  /api/cart:
    get:
      description: Возвращает список товаров в корзине для owner_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.CartItemResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить содержимое корзины
      tags:
      - Корзина
    post:
      consumes:
      - application/json
      description: Добавляет товар в корзину по owner_id (user или ip)
      parameters:
      - description: ID товара и количество
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.AddToCartRequest'
      produces:
      - text/plain
      responses:
        "201":
          description: Added to cart
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Добавить товар в корзину
      tags:
      - Корзина
  /api/cart/{product_id}:
    delete:
      description: Удаляет товар по ID из корзины owner_id
      parameters:
      - description: Идентификатор товара, который нужно удалить или обновить
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Item deleted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить товар из корзины
      tags:
      - Корзина
    put:
      consumes:
      - application/json
      description: Обновляет количество указанного товара для owner_id
      parameters:
      - description: ID товара
        in: path
        name: product_id
        required: true
        type: integer
      - description: Новое количество
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateItemRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: Quantity updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Обновить количество товара в корзине
      tags:
      - Корзина
  /api/cart/clear:
    delete:
      description: Удаляет все товары из корзины owner_id
      produces:
      - text/plain
      responses:
        "200":
          description: Cart cleared
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Очистить корзину
      tags:
      - Корзина
  /api/categories:
    get:
      description: Возвращает все доступные категории товаров
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить список категорий
      tags:
      - Категории
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns JWT token on success
      parameters:
      - description: Phone and password
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/me:
    get:
      description: Returns profile info of authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
  /api/order:
    post:
      description: Оформляет заказ из текущей корзины owner_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Оформить заказ
      tags:
      - Заказ
  /api/orders:
    get:
      description: Возвращает список заказов для текущего owner_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить заказы пользователя
      tags:
      - Заказ
  /api/products:
    get:
      description: Получает список товаров с возможностью фильтрации
      parameters:
      - description: Поиск по названию
        in: query
        name: search
        type: string
      - description: Фильтр по категории
        in: query
        name: category
        type: string
      - description: Минимальная цена
        in: query
        name: min_price
        type: number
      - description: Максимальная цена
        in: query
        name: max_price
        type: number
      - description: Сортировка
        in: query
        name: sort
        type: string
      - description: Ограничение количества результатов
        in: query
        name: limit
        type: integer
      - description: Сдвиг для пагинации
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить список товаров
      tags:
      - Товар
  /api/products/{id}:
    get:
      description: Возвращает детали товара по его идентификатору
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить товар по ID
      tags:
      - Товар
  /api/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with phone, password, username and email
      parameters:
      - description: User registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /ws/orders:
    get:
      description: Устанавливает WebSocket-соединение. Админы получают уведомления
        о новых заказах.
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: Подключение к WebSocket для уведомлений о заказах
      tags:
      - WebSocket
swagger: "2.0"
