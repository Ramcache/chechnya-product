package ws

import (
	"chechnya-product/internal/models"
	"encoding/json"
	"go.uber.org/zap"
	"io"
	"sync"
)

// Client ‚Äî –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç WebSocket
type Client struct {
	ID   int           // userID –∏–ª–∏ 0 –¥–ª—è –≥–æ—Å—Ç–µ–π
	Role string        // "admin", "user" –∏–ª–∏ "guest"
	Conn WebSocketConn // –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–º–µ—Å—Ç–æ *websocket.Conn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
	Send chan []byte   // –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É
	Hub  *Hub          // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ö–∞–±
}

// WebSocketConn ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
type WebSocketConn interface {
	WriteMessage(messageType int, data []byte) error
	Close() error
	NextReader() (messageType int, r io.Reader, err error)
}

// OrderMessage ‚Äî —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
type OrderMessage struct {
	Type  string       `json:"type"`  // —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "new_order"
	Order models.Order `json:"order"` // –∑–∞–∫–∞–∑
}

// Hub ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º–∏
type Hub struct {
	clients     map[*Client]bool
	register    chan *Client
	unregister  chan *Client
	broadcastCh chan OrderMessage
	mu          sync.Mutex
	logger      *zap.Logger // üëà –ª–æ–≥–≥–µ—Ä
}

// NewHub —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Hub
func NewHub(logger *zap.Logger) *Hub {
	return &Hub{
		clients:     make(map[*Client]bool),
		register:    make(chan *Client),
		unregister:  make(chan *Client),
		broadcastCh: make(chan OrderMessage),
		logger:      logger,
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ö–∞–±–∞
func (h *Hub) Run() {
	for {
		select {
		case client := <-h.register:
			h.mu.Lock()
			h.clients[client] = true
			h.mu.Unlock()
			h.logger.Info("WebSocket client connected",
				zap.Int("user_id", client.ID),
				zap.String("role", client.Role),
			)

		case client := <-h.unregister:
			h.mu.Lock()
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.Send)
				client.Conn.Close()
				h.logger.Info("WebSocket client disconnected",
					zap.Int("user_id", client.ID),
					zap.String("role", client.Role),
				)
			}
			h.mu.Unlock()

		case msg := <-h.broadcastCh:
			data, _ := json.Marshal(msg)

			h.mu.Lock()
			sent := 0
			for client := range h.clients {
				select {
				case client.Send <- data:
					sent++
				default:
					close(client.Send)
					delete(h.clients, client)
					client.Conn.Close()
				}
			}
			h.mu.Unlock()

			h.logger.Info("WebSocket broadcast",
				zap.String("type", msg.Type),
				zap.Int("order_id", msg.Order.ID),
				zap.Int("clients_sent", sent),
			)
		}
	}
}

// BroadcastNewOrder ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
func (h *Hub) BroadcastNewOrder(order models.Order) {
	h.broadcastCh <- OrderMessage{
		Type:  "new_order",
		Order: order,
	}
}
