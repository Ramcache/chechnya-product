package services

import (
	"chechnya-product/internal/models"
	"chechnya-product/internal/repositories"
	"chechnya-product/internal/utils"
	"chechnya-product/internal/ws"
	"errors"
	"fmt"
	"go.uber.org/zap"
)

type OrderServiceInterface interface {
	PlaceOrder(ownerID string, req models.PlaceOrderRequest) (*models.Order, error)
	GetOrders(ownerID string) ([]models.Order, error)
	GetAllOrders() ([]models.Order, error)
	UpdateStatus(orderID int, status string) error
	RepeatOrder(orderID int, ownerID string) error
	GetOrderHistory(ownerID string) ([]models.Order, error)
	DeleteOrder(orderID int) error
	GetOrderByID(orderID int) (*models.Order, error)
	AddReview(orderID int, comment *string, rating *int, userID int) error
	GetByOrderReviewID(orderID int) (*models.OrderReview, error)
	GetAllReview() ([]models.OrderReview, error)
}

type OrderService struct {
	cartRepo    repositories.CartRepository
	orderRepo   repositories.OrderRepository
	productRepo repositories.ProductRepository
	userRepo    repositories.UserRepository
	pushService PushServiceInterface
	hub         *ws.Hub
	logger      *zap.Logger
}

func NewOrderService(
	cartRepo repositories.CartRepository,
	orderRepo repositories.OrderRepository,
	productRepo repositories.ProductRepository,
	userRepo repositories.UserRepository,
	pushService PushServiceInterface,
	hub *ws.Hub,
	logger *zap.Logger,
) *OrderService {
	return &OrderService{
		cartRepo:    cartRepo,
		orderRepo:   orderRepo,
		productRepo: productRepo,
		userRepo:    userRepo,
		pushService: pushService,
		hub:         hub,
		logger:      logger,
	}
}

const (
	warehouseLat  = 43.191913
	warehouseLon  = 45.284494
	pricePerKm    = 10.0  // —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 –∫–º
	maxDistanceKm = 200.0 // –º–∞–∫—Å–∏–º—É–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
)

func (s *OrderService) PlaceOrder(ownerID string, req models.PlaceOrderRequest) (*models.Order, error) {
	// 1. –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
	var total float64
	for _, item := range req.Items {
		if item.Price != nil {
			total += *item.Price * float64(item.Quantity)
		}
	}
	total += req.DeliveryFee

	// 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
	if req.Latitude != nil && req.Longitude != nil {
		distance := utils.CalculateDistanceKm(warehouseLat, warehouseLon, *req.Latitude, *req.Longitude)
		if distance > maxDistanceKm {
			return nil, fmt.Errorf("–≤—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
		}
		req.DeliveryFee = pricePerKm * distance
	}

	// 3. –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
	orderID, err := s.orderRepo.CreateFullOrder(ownerID, req, total)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: %w", err)
	}

	// 4. –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
	if err := s.cartRepo.ClearCart(ownerID); err != nil {
		return nil, fmt.Errorf("–∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É: %w", err)
	}

	// 5. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Ç–æ–≤–∞—Ä—ã
	order, err := s.orderRepo.GetByID(orderID)
	if err != nil {
		return nil, fmt.Errorf("–∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: %w", err)
	}

	items, err := s.orderRepo.GetOrderItems(orderID)
	if err != nil {
		return nil, fmt.Errorf("–∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: %w", err)
	}
	order.Items = items

	// 7. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	go func(orderID int) {
		username := ownerID
		if name, err := s.userRepo.GetUsernameByID(ownerID); err == nil && name != "" {
			username = name
		}
		msg := fmt.Sprintf("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #%d –æ—Ç %s", orderID, username)
		if err := s.pushService.SendPushToAdmins(msg); err != nil {
			s.logger.Warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å push –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", zap.Error(err))
		}
	}(order.ID)

	// 6. WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if s.hub != nil {
		s.hub.BroadcastNewOrder(*order)
	}

	return order, nil
}

func (s *OrderService) GetOrders(ownerID string) ([]models.Order, error) {
	orders, err := s.orderRepo.GetWithItemsByOwnerID(ownerID)
	if err != nil {
		return nil, err
	}
	if orders == nil {
		return []models.Order{}, nil
	}
	return orders, nil
}

func (s *OrderService) GetAllOrders() ([]models.Order, error) {
	return s.orderRepo.GetAllWithItems()
}

func (s *OrderService) UpdateStatus(orderID int, status string) error {
	if !models.AllowedOrderStatuses[status] {
		return fmt.Errorf("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å")
	}

	err := s.orderRepo.UpdateStatus(orderID, status)
	if err != nil {
		return err
	}

	order, err := s.orderRepo.GetByID(orderID)
	if err == nil && s.hub != nil {
		s.hub.BroadcastStatusUpdate(*order)
	}

	return nil
}

func (s *OrderService) RepeatOrder(orderID int, ownerID string) error {
	order, err := s.orderRepo.GetByID(orderID)
	if err != nil || order.OwnerID != ownerID {
		return errors.New("invalid order")
	}

	items, err := s.orderRepo.GetOrderItems(orderID)
	if err != nil {
		return err
	}

	for _, item := range items {
		if err := s.cartRepo.AddOrUpdate(ownerID, item.ProductID, item.Quantity); err != nil {
			return err
		}
	}
	return nil
}

func (s *OrderService) GetOrderHistory(ownerID string) ([]models.Order, error) {
	return s.orderRepo.GetWithItemsByOwnerID(ownerID)
}

func (s *OrderService) DeleteOrder(orderID int) error {
	return s.orderRepo.DeleteOrder(orderID)
}

func (s *OrderService) GetOrderByID(orderID int) (*models.Order, error) {
	order, err := s.orderRepo.GetByID(orderID)
	if err != nil {
		return nil, err
	}

	items, err := s.orderRepo.GetOrderItems(orderID)
	if err != nil {
		return nil, err
	}

	order.Items = items
	return order, nil
}

func (s *OrderService) AddReview(orderID int, comment *string, rating *int, userID int) error {
	if rating != nil && (*rating < 1 || *rating > 5) {
		return fmt.Errorf("—Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
	}

	order, err := s.orderRepo.GetByID(orderID)
	if err != nil {
		return fmt.Errorf("–∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	if order.Status != "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" {
		return fmt.Errorf("–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
	}

	return s.orderRepo.AddReview(orderID, comment, rating, userID)
}

func (s *OrderService) GetByOrderReviewID(orderID int) (*models.OrderReview, error) {
	return s.orderRepo.GetReviewByOrderID(orderID)
}

func (s *OrderService) GetAllReview() ([]models.OrderReview, error) {
	return s.orderRepo.GetAllOrderReviews()
}
