// main.go
package main

import (
	"chechnya-product/config"
	"chechnya-product/internal/app"
	"chechnya-product/internal/cache"
	"chechnya-product/internal/db"
	"chechnya-product/internal/logger"
	"context"
	"errors"
	"github.com/pressly/goose/v3"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"log"
	"net/http"
	"os"
	"time"
)

// @title Chechnya Product API
// @version 5.0
// @description Backend for products shop
// @host localhost:8080
// @BasePath /api
func main() {
	// ü™µ –õ–æ–≥–≥–µ—Ä
	logger, err := logger.NewLogger()
	if err != nil {
		log.Fatalf("failed to initialize logger: %v", err)
	}
	defer logger.Sync()

	// ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥
	cfg, err := config.LoadConfig()
	if err != nil {
		logger.Fatal("Failed to load config", zap.Error(err))
	}

	// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
	dbConn, err := db.NewPostgresDB(cfg)
	if err != nil {
		logger.Fatal("Failed to connect to database", zap.Error(err))
	}
	defer dbConn.Close()

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	if len(os.Args) > 1 && os.Args[1] == "migrate" {
		logger.Sugar().Info("Running goose migrations...")
		if err := goose.Up(dbConn.DB, "migrations"); err != nil {
			logger.Fatal("Failed to apply migrations", zap.Error(err))
		}
		logger.Sugar().Info("Migrations completed.")
		return
	}
	redisClient := redis.NewClient(cfg.GetRedisOptions())

	logger.Sugar().Infow("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis", "addr", cfg.RedisAddr)

	logger.Sugar().Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")

	if err := redisClient.Ping(context.Background()).Err(); err != nil {
		logger.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis", zap.Error(err))
	}

	// –û–±—ë—Ä—Ç–∫–∞ RedisCache
	ttl := time.Duration(cfg.RedisTTLMinutes) * time.Minute
	redisCache := cache.NewRedisCache(redisClient, ttl, logger)

	// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	srv := app.NewServer(cfg, logger, dbConn, redisCache)
	logger.Sugar().Infow("Server is running", "port", cfg.Port)

	if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		logger.Fatal("Server failed to start", zap.Error(err))
	}
}
