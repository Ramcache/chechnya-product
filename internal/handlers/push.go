package handlers

import (
	"chechnya-product/internal/middleware"
	"chechnya-product/internal/services"
	"chechnya-product/internal/utils"
	"encoding/json"
	"github.com/SherClockHolmes/webpush-go"
	"go.uber.org/zap"
	"net/http"
)

type PushHandlerInterface interface {
	SendNotification(w http.ResponseWriter, r *http.Request)
	Broadcast(w http.ResponseWriter, r *http.Request)
	DeleteSubscription(w http.ResponseWriter, r *http.Request)
	SendTestPush(w http.ResponseWriter, r *http.Request)
}

type PushHandler struct {
	service services.PushServiceInterface
	logger  *zap.Logger
}

func NewPushHandler(service services.PushServiceInterface, logger *zap.Logger) *PushHandler {
	return &PushHandler{service: service, logger: logger}
}

type pushRequest struct {
	Subscription webpush.Subscription `json:"subscription"`
	Message      string               `json:"message"`
}

// SendNotification
// @Summary –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
// @Description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
// @Tags Push
// @Accept json
// @Produce json
// @Param input body pushRequest true "–ü–æ–¥–ø–∏—Å–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
// @Success 200 {object} utils.SuccessResponse
// @Failure 400 {object} utils.ErrorResponse
// @Failure 500 {object} utils.ErrorResponse
// @Router /api/push/send [post]
func (h *PushHandler) SendNotification(w http.ResponseWriter, r *http.Request) {
	var req pushRequest
	if req.Message == "" {
		req.Message = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Chechnya Product"
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Warn("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON", zap.Error(err))
		utils.ErrorJSON(w, http.StatusBadRequest, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
		return
	}

	role := middleware.GetUserRole(r)
	isAdmin := role == "admin"

	if err := h.service.SendPush(req.Subscription, req.Message, isAdmin); err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push", zap.Error(err))
		utils.ErrorJSON(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push")
		return
	}

	h.logger.Info("push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
	utils.JSONResponse(w, http.StatusOK, "Push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", nil)
}

// Broadcast
// @Summary –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// @Description –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
// @Tags Push
// @Accept json
// @Produce json
// @Param input body map[string]string true "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
// @Success 200 {object} utils.SuccessResponse
// @Failure 400 {object} utils.ErrorResponse
// @Failure 500 {object} utils.ErrorResponse
// @Router /api/push/broadcast [post]
func (h *PushHandler) Broadcast(w http.ResponseWriter, r *http.Request) {
	var req struct {
		Message string `json:"message"`
	}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Warn("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON", zap.Error(err))
		utils.ErrorJSON(w, http.StatusBadRequest, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
		return
	}

	if err := h.service.Broadcast(req.Message); err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", zap.Error(err))
		utils.ErrorJSON(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ push")
		return
	}

	h.logger.Info("—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	utils.JSONResponse(w, http.StatusOK, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", nil)
}

// DeleteSubscription
// @Summary –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
// @Description –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ endpoint
// @Tags Push
// @Produce json
// @Param endpoint query string true "URL –ø–æ–¥–ø–∏—Å–∫–∏"
// @Success 200 {object} utils.SuccessResponse
// @Failure 400 {object} utils.ErrorResponse
// @Failure 500 {object} utils.ErrorResponse
// @Router /api/push/delete [delete]
func (h *PushHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request) {
	endpoint := r.URL.Query().Get("endpoint")
	if endpoint == "" {
		h.logger.Warn("–Ω–µ —É–∫–∞–∑–∞–Ω endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
		utils.ErrorJSON(w, http.StatusBadRequest, "–ù–µ —É–∫–∞–∑–∞–Ω endpoint")
		return
	}

	if err := h.service.DeleteByEndpoint(endpoint); err != nil {
		h.logger.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", zap.String("endpoint", endpoint), zap.Error(err))
		utils.ErrorJSON(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
		return
	}

	h.logger.Info("–ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞", zap.String("endpoint", endpoint))
	utils.JSONResponse(w, http.StatusOK, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞", nil)
}

// SendTestPush
// @Summary      –¢–µ—Å—Ç–æ–≤—ã–π –ø—É—à
// @Description  –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
// @Tags         Push
// @Accept       json
// @Produce      json
// @Param        request body pushRequest true "–ü—É—à-–ø–æ–¥–ø–∏—Å–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
// @Success      200 {object} map[string]string
// @Failure      400 {object} utils.ErrorResponse
// @Failure      500 {object} utils.ErrorResponse
// @Router       /api/push/test/send [post]
func (h *PushHandler) SendTestPush(w http.ResponseWriter, r *http.Request) {
	var req pushRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Warn("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞", zap.Error(err))
		utils.ErrorJSON(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
		return
	}

	h.logger.Debug("üì¶ –í—Ö–æ–¥—è—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
		zap.String("endpoint", req.Subscription.Endpoint),
		zap.String("p256dh", req.Subscription.Keys.P256dh),
		zap.String("auth", req.Subscription.Keys.Auth),
		zap.Int("p256dh_len", len(req.Subscription.Keys.P256dh)),
		zap.Int("auth_len", len(req.Subscription.Keys.Auth)),
	)

	if err := h.service.SendPush(req.Subscription, req.Message, false); err != nil {
		h.logger.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push", zap.Error(err))
		utils.ErrorJSON(w, http.StatusInternalServerError, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å push")
		return
	}

	utils.JSONResponse(w, http.StatusOK, "—Ç–µ—Å—Ç", nil)
}
